/* Minification failed. Returning unminified contents.
(161,201-202): run-time error JS1195: Expected expression: .
(161,210-211): run-time error JS1195: Expected expression: )
(162,21-25): run-time error JS1034: Unmatched 'else'; no 'if' defined: else
(162,21-25): run-time error JS1034: Unmatched 'else'; no 'if' defined: else
(163,147-148): run-time error JS1002: Syntax error: }
(167,62-63): run-time error JS1004: Expected ';': {
(180,19-23): run-time error JS1034: Unmatched 'else'; no 'if' defined: else
(182,17-18): run-time error JS1002: Syntax error: }
(184,39-40): run-time error JS1004: Expected ';': {
(191,9-10): run-time error JS1002: Syntax error: }
(194,35-36): run-time error JS1004: Expected ';': {
(211,201-202): run-time error JS1195: Expected expression: .
(211,210-211): run-time error JS1195: Expected expression: )
(212,21-25): run-time error JS1034: Unmatched 'else'; no 'if' defined: else
(213,147-148): run-time error JS1002: Syntax error: }
(217,62-63): run-time error JS1004: Expected ';': {
(219,19-23): run-time error JS1034: Unmatched 'else'; no 'if' defined: else
(221,17-18): run-time error JS1002: Syntax error: }
(223,39-40): run-time error JS1004: Expected ';': {
(230,9-10): run-time error JS1002: Syntax error: }
(233,41-42): run-time error JS1004: Expected ';': {
(709,1-2): run-time error JS1002: Syntax error: }
(685,5,708,6): run-time error JS1018: 'return' statement outside of function: return {
        LoginUrl: "",
        AccountId: "",
        SelectClient: "",
        RegisterPaymentPin: "",
        ForgotPasswordUrl: "",
        ChangeResetPasswordUrl: "",
        UserType: "",//Admin or Employee
        TwoFactorUrl: "",
        WorkStationUrl: "",
        AuthToken: "",
        GetNewPassCodeUrl: "",
        UserName: "",
        ReturnUrl: "",
        SCG: null,
        WorkStation: null,
        LoadingImagePath: getLoadingImagePath,
        ErrorCode:"",
        User: {
            UserName: "",
            AccountID: "",
            ContactID: ""
        }
    }
(213,139-145): run-time error JS1018: 'return' statement outside of function: return
(211,213-219): run-time error JS1018: 'return' statement outside of function: return
(163,139-145): run-time error JS1018: 'return' statement outside of function: return
 */
var Account = (function () {

    function PrivacyStatement() {
        var url = document.getElementById("psUrl")
       // alert(url);
        var language;
        if (window.navigator.languages) {
            language = window.navigator.languages[0];
            //window.open('http://dev.privacy.nj.adp.com/privacy.html?locale=' + language + '&policy=PrivacyStatements');
            if (url != null)
                window.open(url.value.replace("language", language));
        } else {
            language = window.navigator.userLanguage || window.navigator.language;
            // window.open('http://dev.privacy.nj.adp.com/privacy.html?locale=' + language + '&policy=PrivacyStatements');
            if (url != null)
                window.open(url.value.replace("language", language));
        }
    }  

    function btnAdminLoginClicked() {
        //1st remove readonly from password field so that it can be validated
        $("#frmAdminLogin input[name='password']").removeAttr("readonly");

        var validator = $("#frmAdminLogin").validator('validate');
        var isValid = $("#frmAdminLogin .has-error").length > 0 ? false : true;

        if (isValid) {

            var params = {
                UserName: $("#frmAdminLogin input[name='username']").val(),
                Password: $("#frmAdminLogin input[name='password']").val(),
                EntityType: "admin",
                ReturnUrl: Account.ReturnUrl
            };

            login(params);
        }
    }

    function btnAdminReLoginClicked() {
        //1st remove readonly from password field so that it can be validated
        $("#frmAdminReLogin input[name='password']").removeAttr("readonly");

        var validator = $("#frmAdminReLogin").validator('validate');
        var isValid = $("#frmAdminReLogin .has-error").length > 0 ? false : true;

        if (isValid) {

            var params = {
                UserName: Account.User.UserName,
                AccountID: Account.User.AccountID,
                Password: $("#frmAdminReLogin input[name='password']").val(),
                EntityType: "admin",
                ReturnUrl: Account.ReturnUrl
            };

            login(params);
        }
    }

    function btnAdminSelectClientContinueClicked() {
        
        var accountId = $(".selectpicker option:selected").val();

        var params = {
            AccountID: accountId,
            ReturnUrl: Account.ReturnUrl
        };

        selectClient(params);
    }

    function btnAdminRegisterPaymentPinClicked() {

        var AOID = $("#frmAdminRegisterPaymentPin input[name='AOID']").val();
        var OOID = $("#frmAdminRegisterPaymentPin input[name='OOID']").val();
        var paymentPin = $("#frmAdminRegisterPaymentPin input[name='paymentPin']")
            .map(function() { return $(this).val(); }).get().join().replace(new RegExp(/,/g), '');
        var confirmPaymentPin = $("#frmAdminRegisterPaymentPin input[name='confirmPaymentPin']")
            .map(function() { return $(this).val(); }).get().join().replace(new RegExp(/,/g), '');

        if (paymentPin.length !== 6 || confirmPaymentPin.length !== 6) {
            swal("Error !", "Payment pin must be 6 digits in length", "error"); return;
        }
            
        if (paymentPin !== confirmPaymentPin) {
            swal("Error !", "Payment pin values do not match", "error"); return;
        }

        var params = {
            AOID: AOID,
            OOID: OOID,
            PaymentPin: paymentPin
        }

        registerPaymentPin(params);
    }

    function btnAdminSelectClientRadioChanged() {

        if ($(this).is(':checked')) {
            $('.selectpicker').val('0').selectpicker('refresh');

            $('#btnAdminSelectClientContinue').prop('disabled', true);
            
            switch ($(this).val()) {
                case 'US':
                    $('#divUS button').prop('disabled', false);
                    $('#divEU button').prop('disabled', true);
                    break;
                case 'EU':
                    $('#divUS button').prop('disabled', true);
                    $('#divEU button').prop('disabled', false);
                    break;
            }
        }
    }

    function btnAdminSelectClientSelectChanged() {
        $('#btnAdminSelectClientContinue').prop('disabled', false);
    }

    function btnEmployeeLoginClicked() {
        //1st remove readonly from password field so that it can be validated
        $("#frmEmployeeLogin input[name='password']").removeAttr("readonly");

        var validator = $("#frmEmployeeLogin").validator('validate');
        var isValid = $("#frmEmployeeLogin .has-error").length > 0 ? false : true;

        if (isValid) {

            var params = {
                UserName: $("#frmEmployeeLogin input[name='username']").val(),
                Password: $("#frmEmployeeLogin input[name='password']").val(),
                EntityType: "employee",
                ReturnUrl: Account.ReturnUrl
            };

            login(params);
        }
    }

    function login(params) {

        $.ajax({
            url: Account.LoginUrl,
            //data: JSON.stringify(params),
            data: addAntiForgeryToken(params),
            type: "POST",
            async: true,
            //contentType: "application/json",
            beforeSend: function (xhr) {
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we authenticate...</h3>' });
            },
            success: function (result) {
                if (!result) { $.unblockUI(); swal('Error !', 'There was an error in signing you in. Please try again or contact ADP Celergo Support.', 'error'); }
                //If result is not successful
                if (!result.IsSuccess) {
                    $.unblockUI();
                    if (result.Errors && result.Errors.length > 0)
                    { swal({ title: "Error !", text: result.Errors.join("<br />"), type: "error", customClass: "sweetalert-error", showCancelButton: false, confirmButtonColor: "#f8c62f", html: result?.IsHtml }); return; }
                    else
                    { swal("Error !", "There was an error in signing you in. Please try again or contact ADP Celergo Support.", "error"); return; }
                }

                //If result has redirecturl then redirect
                if (result.IsRedirect && result.RedirectUrl) {
                    if (result.RedirectUrl.toLowerCase().indexOf("account/twofactor")) {
                        //when navigating to twofactor verification page from login page, set the locat storage so I know whether to show any alerts or not
                        localStorage.setItem("newpasscodesent", "We have sent a new passcode to email address: " + params.UserName);
                        localStorage.setItem("username", params.UserName);
                    }
                    else if (result.RedirectUrl.toLowerCase().indexOf("account/selectclient")) {
                        localStorage.setItem("username", params.UserName);
                    }
                    else if (result.RedirectUrl.toLowerCase().indexOf("account/workstation")) {

                    }
                    window.location = result.RedirectUrl;
                } else {
                    $.unblockUI();
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
                swal('Error !', 'There was an error. Please try again or contact ADP Celergo Support.', 'error');
                console.log(a);
                console.log(b);
                console.log(c);
            }
        });
    }

    function selectClient(params) {
        $.ajax({
            url: Account.SelectClient,
            //data: JSON.stringify(params),
            data: addAntiForgeryToken(params),
            type: "POST",
            async: true,
            //contentType: "application/json",
            beforeSend: function (xhr) {
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait ...</h3>' });
            },
            success: function (result) {
                if (!result) { $.unblockUI(); swal('Error !', 'There was an error in signing you in. Please try again or contact ADP Celergo Support.', 'error'); }
                //If result is not successful
                if (!result.IsSuccess) {
                    $.unblockUI();
                    if (result.Errors && result.Errors.length > 0)
                    { swal({ title: "Error !", text: result.Errors.join("<br />"), type: "error", customClass: "sweetalert-error", showCancelButton: false, confirmButtonColor: "#f8c62f", html: result?.IsHtml }); return; }
                    else
                    { swal("Error !", "There was an error in signing you in. Please try again or contact ADP Celergo Support.", "error"); return; }
                }

                //If result has redirecturl then redirect
                if (result.IsRedirect && result.RedirectUrl) {
                    window.location = result.RedirectUrl;
                } else {
                    $.unblockUI();
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
                swal('Error !', 'There was an error. Please try again or contact ADP Celergo Support.', 'error');
                console.log(a);
                console.log(b);
                console.log(c);
            }
        });
    }

    function registerPaymentPin(params) {
        $.ajax({
            url: Account.RegisterPaymentPin,
            //data: JSON.stringify(params),
            data: addAntiForgeryToken(params),
            type: "POST",
            async: true,
            //contentType: "application/json",
            beforeSend: function (xhr) {
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait ...</h3>' });
            },
            success: function (result) {
                if (!result) { $.unblockUI(); swal('Error !', 'There was an error in setting up your payment pin. Please try again or contact ADP Celergo Support.', 'error'); }
                //If result is not successful
                if (!result.IsSuccess) {
                    $.unblockUI();
                    if (result.Errors && result.Errors.length > 0) { swal({ title: "Error !", text: result.Errors.join("<br />"), type: "error", customClass: "sweetalert-error", showCancelButton: false, confirmButtonColor: "#f8c62f" }); return; }
                    else { swal("Error !", "There was an error in setting up your payment pin. Please try again or contact ADP Celergo Support.", "error"); return; }
                }

                //If result has redirecturl then redirect
                if (result.IsRedirect && result.RedirectUrl) {
                    window.location = result.RedirectUrl;
                } else {
                    $.unblockUI();
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
                swal('Error !', 'There was an error. Please try again or contact ADP Celergo Support.', 'error');
                console.log(a);
                console.log(b);
                console.log(c);
            }
        });
    }

    function btnChangeResetPasswordClicked() {
        if (!ChangeResetPassword.Validate())
            return;

        //Verify password reqs are satisfied
        if (!ChangeResetPassword.MatchPassword() || !ChangeResetPassword.CheckPasswordComplexity())
            return;
        
        var params = {
            OldPassword: $("input[name='oldpassword']").val(),
            NewPassword: $("input[name='newpassword']").val(),
            UserType: Account.UserType,
            ReturnUrl: Account.ReturnUrl       
        };

        $.ajax({
            url: Account.ChangeResetPasswordUrl,
            //data: JSON.stringify(params),
            data: addAntiForgeryToken(params),
            type: "POST",
            async: true,
            //contentType: "application/json",
            beforeSend: function (xhr) {
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we make the changes...</h3>' });
            },
            success: function (result) {
                if (!result) { $.unblockUI(); Common.ShowAlert("There was an error. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                if (!result.IsSuccess) {
                    $.unblockUI();
                    if (result.Errors && result.Errors.length > 0)
                    { Common.ShowAlert(result.Errors.join("<br />"), "alert-danger", 0, true); return; }
                    else
                    { Common.ShowAlert("There was an error. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                }

                //If result has redirecturl then redirect
                if (result.IsRedirect && result.RedirectUrl) {
                    window.location = result.RedirectUrl;
                } else {
                    $.unblockUI();
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
                console.log(a);
                console.log(b);
                console.log(c);
            }
        });
    }

    function btnForgotPasswordClicked() {
        var validator = $("#frmForgotPassword").validator('validate');
        var isValid = $("#frmForgotPassword .has-error").length > 0 ? false : true;
        if (isValid) {
            var params = {
                Email: $("input[name='username']").val(),
                UserType: Account.UserType,
                ReturnUrl: Account.ReturnUrl
            };

            $.ajax({
                url: Account.ForgotPasswordUrl,
                //data: JSON.stringify(params),
                data: addAntiForgeryToken(params),
                type: "POST",
                async: true,
                //contentType: "application/json",
                beforeSend: function (xhr) {
                    $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we verify your email...</h3>' });
                },
                success: function (result) {
                    $.unblockUI();
                    if (!result) { Common.ShowAlert("There was an error in verifying the email. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                    if (!result.IsSuccess) {
                        if (result.Errors && result.Errors.length > 0)
                        { Common.ShowAlert(result.Errors.join("<br />"), "alert-danger"); return; }
                        else
                        { Common.ShowAlert("There was an error in verifying the email. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                    }
                    Common.ShowAlert("An email has been sent on your email address.", "alert-success", 0, true);
                },
                error: function (a, b, c) {
                    $.unblockUI();
                    console.log(a);
                    console.log(b);
                    console.log(c);
                }
            });
        }
    }

    function btnValidatePassCodeClicked() {
        //1st remove readonly from Passcode field so that it can be validated
        $("input[name='passcode']").removeAttr("readonly");
        var validator = $("#frmTwoFactorPassCode").validator('validate');
        var isValid = $("#frmTwoFactorPassCode .has-error").length > 0 ? false : true;

        if (isValid) {
            var params = {
                SecretCode: $("input[name='passcode']").val(),
                IsNewSecretCodeGenerated: Account.SCG,
                WorkStation: Account.WorkStation,
                ReturnUrl: Account.ReturnUrl
            };

            $.ajax({
                url: Account.TwoFactorUrl,
                //data: JSON.stringify(params),
                data: addAntiForgeryToken(params),
                type: "POST",
                async: true,
                //contentType: "application/json",
                beforeSend: function (xhr) {
                    $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we authenticate...</h3>' });
                },
                success: function (result) {
                    if (!result) { $.unblockUI(); Common.ShowAlert("There was an error in verifying the code. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                    if (!result.IsSuccess) {
                        $.unblockUI();
                        if (result.Errors && result.Errors.length > 0)
                        { Common.ShowAlert(result.Errors.join("<br />"), "alert-danger", 0, true); return; }
                        else
                        { Common.ShowAlert("There was an error in verifying the code. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                    }
                    if (result.IsRedirect && result.RedirectUrl) {
                        $.unblockUI();
                        $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we authenticate...</h3>' });
                        window.location = result.RedirectUrl;
                    } else {
                        $.unblockUI();
                    }
                },
                error: function (a, b, c) {
                    $.unblockUI();
                    console.log(a);
                    console.log(b);
                    console.log(c);
                }
            });
        }
    }

    //Send the workstation info and authtoken to server to save the cookie and redirect user to two factor passcode
    function btnWorkStationSelected() {
        var params = {
            authToken: Account.AuthToken,
            workStationType: $("input[name='workstationtype']:checked").val(),
            ReturnUrl: Account.ReturnUrl
        };

        $.ajax({
            url: Account.WorkStationUrl,
            //data: JSON.stringify(params),
            data: addAntiForgeryToken(params),
            type: "POST",
            async: true,
            //contentType: "application/json",
            beforeSend: function (xhr) {
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we save your preferences...</h3>' });
            },
            success: function (result) {
                if (!result) { $.unblockUI(); Common.ShowAlert("There was an error in saving your preferences. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                if (!result.IsSuccess) {
                    $.unblockUI();
                    if (result.Errors && result.Errors.length > 0)
                    { Common.ShowAlert(result.Errors.join("<br />"), "alert-danger"); return; }
                    else
                    { Common.ShowAlert("There was an error in saving your preferences. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                }
                if (result.IsRedirect && result.RedirectUrl) {
                    if (result.RedirectUrl.toLowerCase().indexOf("account/twofactor")) {
                        //when navigating to twofactor verification page from login page, set the locat storage so I know whether to show any alerts or not
                        localStorage.setItem("newpasscodesent", true);
                    }
                    $.unblockUI();
                    $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we authenticate...</h3>' });
                    window.location = result.RedirectUrl;
                } else {
                    $.unblockUI();
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
                console.log(a);
                console.log(b);
                console.log(c);
            }
        });
    }

    function getTimeStamp() {
        var d = new Date();
        var str = d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds() + ":" + d.getMilliseconds();
        return str;
    }

    //If you have cleared first leveel authentication then you will have a valid authtoken which is required to get a new token
    function getNewPassCodeClicked() {
        console.log("get new passcode clicked at: " + getTimeStamp());
        var params = {
            authToken: Account.AuthToken,
            ReturnUrl: Account.ReturnUrl
        };

        $.ajax({
            url: Account.GetNewPassCodeUrl,
            data: params,
            type: "GET",
            async: true,
            contentType: "application/json",
            beforeSend: function (xhr) {
                console.log("get new passcode ajax call started at: " + getTimeStamp());
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we send you a new Passcode...</h3>' });
            },
            success: function (result) {
                if (!result) { $.unblockUI(); Common.ShowAlert("There was an error in getting a new passcode. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }

                if (!result.IsSuccess) {
                    $.unblockUI();
                    if (result.Errors && result.Errors.length > 0)
                    { Common.ShowAlert(result.Errors.join("<br />"), "alert-danger"); return; }
                    else
                    { Common.ShowAlert("There was an error in getting a new passcode. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                }
                else if (result.IsRedirect && result.RedirectUrl) {
                    window.location = result.RedirectUrl;
                }
                else if (result.IsSuccess) {
                    $.unblockUI();
                    Common.ShowAlert(result.Content, "alert-success", 0, true);
                    return;
                }
                else {
                    $.unblockUI();
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
                console.log(a);
                console.log(b);
                console.log(c);
            }
        });
    }

    function chkTermsChanged() {
        $("#btnAcceptTermsAndConditions").prop("disabled", !this.checked);
    }

    function ddlSelectClientChanged() {
        var clientId = $('.selectpicker option:selected').text().trim();
        var clientEnv = $('.selectpicker option:selected').attr('data-region');
        var clientCode = $('.selectpicker option:selected').attr('data-clientCode');
        localStorage.setItem("clientId", clientId);
        localStorage.setItem("clientEnv", clientEnv);
        localStorage.setItem("clientCode", clientCode);
    }

    function btnAcceptTermsAndConditionsClicked() {
        var params = {
            returnUrl: Account.ReturnUrl
        };

        $.ajax({
            url: Account.TermsAndConditionsUrl,
            //data: JSON.stringify(params),
            data: addAntiForgeryToken(params),
            type: "POST",
            async: true,
            //contentType: "application/json",
            beforeSend: function (xhr) {
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we update your preferences...</h3>' });
            },
            success: function (result) {
                if (!result) { $.unblockUI(); Common.ShowAlert("There was an error in updating the terms and conditions. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                if (!result.IsSuccess) {
                    $.unblockUI();
                    if (result.Errors && result.Errors.length > 0)
                    { Common.ShowAlert(result.Errors.join("<br />"), "alert-danger", 0, true); return; }
                    else
                    { Common.ShowAlert("There was an error in updating the terms and conditions. Please try again or contact ADP Celergo Support.", "alert-danger", 0, true); return; }
                }
                if (result.IsRedirect && result.RedirectUrl) {
                    $.unblockUI();
                    $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait while we redirect you...</h3>' });
                    window.location = result.RedirectUrl;
                } else {
                    $.unblockUI();
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
                console.log(a);
                console.log(b);
                console.log(c);
            }
        });
    }

    function onAdminUserNameKeyUp(e) {
        if (e.keyCode == 13) {
            $("#btnAdminSignIn").click();
        }
    }

    function onAdminPasswordKeyUp(e) {
        if (e.keyCode == 13) {
            $("#btnAdminSignIn").click();
        }
    }

    function onAdminRePasswordKeyUp(e) {
        if (e.keyCode == 13) {
            $("#btnAdminReSignIn").click();
        }
    }

    function onEmployeeUserNameKeyUp(e) {
        if (e.keyCode == 13) {
            $("#btnEmployeeSignIn").click();
        }
    }

    function onEmployeePasswordKeyUp(e) {
        if (e.keyCode == 13) {
            $("#btnEmployeeSignIn").click();
        }
    }

    function onPasscodeKeyUp(e) {
        if (e.keyCode == 13) {
            $("#btnValidatePassCode").click();
        }
    }

    function handleResetPwdKeyUp(e) {
        if (e.keyCode == 13) {
            $("#btnChangeResetPassword").click();
        }
    }

    function getLoadingImagePath() {
        return ssoBaseUrl + "Images/loader.gif";
    }

    function addAntiForgeryToken(data) {
        data.__RequestVerificationToken = $("[name='__RequestVerificationToken']").val();
        return data;
    };

    function getErrorMessageByCode() {

        if (Account.ErrorCode === "")
            return;

        var params =
        {
            errorCode: Account.ErrorCode 
        };

        $.ajax({
            url: Account.ErrorDetailsUrl,
            data: addAntiForgeryToken(params),
            type: "POST",
            async: true,
            beforeSend: function (xhr) {
                $.blockUI({ message: '<br /><img src="' + Account.LoadingImagePath() + '" /><br /><h3>Please wait ...</h3>' });
            },
            success: function (result) {
                $.unblockUI();

                if (result) {
                    Common.ShowAlert(result, "alert-danger");
                } else {
                    Common.ShowAlert("An error occured, please contact system administrator", "alert-danger");
                }
            },
            error: function (a, b, c) {
                $.unblockUI();
            }
        });
    }

    $(document).ready(function () {
        $(document).on("keyup", "#frmAdminLogin input[name='username']", onAdminUserNameKeyUp);
        $(document).on("keyup", "#frmAdminLogin input[name='password']", onAdminPasswordKeyUp);
        $(document).on("keyup", "#frmAdminReLogin input[name='password']", onAdminRePasswordKeyUp);
        $(document).on("keyup", "#frmEmployeeLogin input[name='username']", onEmployeeUserNameKeyUp);
        $(document).on("keyup", "#frmEmployeeLogin input[name='password']", onEmployeePasswordKeyUp);
        $(document).on("keyup", "#frmTwoFactorPassCode input[name='passcode']", onPasscodeKeyUp);
        $(document).on("keyup", "#frmChangeResetPassword input[name='oldpassword']", handleResetPwdKeyUp);
        $(document).on("keyup", "#frmChangeResetPassword input[name='newpassword']", handleResetPwdKeyUp);
        $(document).on("keyup", "#frmChangeResetPassword input[name='confirmpassword']", handleResetPwdKeyUp);
        $(document).on("click", "#btnEmployeeSignIn", btnEmployeeLoginClicked);
        $(document).on("click", "#btnAdminSignIn", btnAdminLoginClicked);
        $(document).on("click", "#btnAdminReSignIn", btnAdminReLoginClicked);
        $(document).on("click", "#btnValidatePassCode", btnValidatePassCodeClicked);
        $(document).on("click", "#btnForgotPassword", btnForgotPasswordClicked);
        $(document).on("click", "#btnChangeResetPassword", btnChangeResetPasswordClicked);
        $(document).on("click", "a#getNewPassCode", getNewPassCodeClicked);
        $(document).on("click", "#btnSelectWorkStation", btnWorkStationSelected);
        $(document).on("click", "#btnAcceptTermsAndConditions", btnAcceptTermsAndConditionsClicked);
        $(document).on("change", "#chkTerms", chkTermsChanged);
        $(document).on("change", "input[type='radio'][name='region']", btnAdminSelectClientRadioChanged);
        $(document).on("changed.bs.select", ".selectpicker", btnAdminSelectClientSelectChanged);
        $(document).on("click", "#btnAdminSelectClientContinue", btnAdminSelectClientContinueClicked);   
        $(document).on("click", "#btnAdminRegisterPaymentPin", btnAdminRegisterPaymentPinClicked);   
        $("#ddlSelectClient").on("change", ddlSelectClientChanged);
        $(document).on("click", "#linkPrivacyStatement", PrivacyStatement);

        getErrorMessageByCode();

    });

    return {
        LoginUrl: "",
        AccountId: "",
        SelectClient: "",
        RegisterPaymentPin: "",
        ForgotPasswordUrl: "",
        ChangeResetPasswordUrl: "",
        UserType: "",//Admin or Employee
        TwoFactorUrl: "",
        WorkStationUrl: "",
        AuthToken: "",
        GetNewPassCodeUrl: "",
        UserName: "",
        ReturnUrl: "",
        SCG: null,
        WorkStation: null,
        LoadingImagePath: getLoadingImagePath,
        ErrorCode:"",
        User: {
            UserName: "",
            AccountID: "",
            ContactID: ""
        }
    }
})();
;
